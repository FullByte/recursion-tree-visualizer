# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your docker images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-1`.
#    Replace the value of `AWS_ECR_REPOSITORY_NAME` env in the workflow below with your repository's name.
#    Replace the value of `AWS_REGION` env in the workflow below with your repository's region.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

# reference: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions
# github-hosted runner: https://docs.github.com/en/actions/reference/specifications-for-github-hosted-runners#supported-software



name: Deploy lambda function

on:
  push:
    branches: develop # CHANGE TO MASTER
  # paths: # esse pipeline Ã© executado se houver pelo menos uma alteracao em:
  #   - 'packages/lambda/**'

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  AWS_ECR_REPOSITORY_NAME: recursion-tree-visualizer

defaults:
  run: # provide default options for all run steps in workflow
    shell: bash
    working-directory: packages/lambda

jobs:
  deploy:
    name: Deploy container image to AWS Lambda
    runs-on: ubuntu-latest

    steps: # each step is isolated from other
      - name: Checkout
        uses: actions/checkout@v2

      - name: Authenticate Docker client to ECR registry
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to ECR repository
        id: build-image
        env:
          ECR_REGISTRY_URI: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --tag $ECR_REGISTRY_URI/$AWS_ECR_REPOSITORY_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY_URI/$AWS_ECR_REPOSITORY_NAME:$IMAGE_TAG
          echo "::set-output name=image-uri::$ECR_REGISTRY_URI/$AWS_ECR_REPOSITORY_NAME:$IMAGE_TAG"

      # TODO: use aws sam cli to deploy to lambda as container
      - name: AWS CLI test
        run: |
          aws s3 ls
          echo ${{ steps.build-image.outputs.image-uri }}

