# This file defines how the docker image is built
# Each command is a new layer in the image
# RUN - executed during the building of the image
# CMD - executed when running the image in a container

# the aws lambda have requirements for container images: https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-create-2 (example for nodejs in https://www.npmjs.com/package/aws-lambda-ric)

# define this in an previous image layer the dependencies will be reinstalled only if package.json change, thanks to caching
# COPY ["package.json", "package-lock.json*", "./"]
# RUN npm install
# COPY . .

# global args
ARG LAMBDA_FUNCTION_DIR="/function"

# STAGE 1: build the node-alpine with aws-lambda-ric
FROM node:lts-alpine AS build-image

# include global arg in this stage of the build
ARG LAMBDA_FUNCTION_DIR

# install aws-lambda-cpp dependencies and my needs
RUN apk update \
  && apk upgrade \
  && apk add --no-cache \
    g++ make cmake unzip build-base libtool autoconf automake libexecinfo-dev libcurl \
    python3

# create and set the working directory where the next commands will be executed
RUN mkdir -p ${LAMBDA_FUNCTION_DIR}
WORKDIR ${LAMBDA_FUNCTION_DIR}

# copy lambda source code into image, except files in .dockerignore
COPY . .

# install the runtime interface client
RUN npm install aws-lambda-ric

# install code dependencies
RUN npm install

# build to js
RUN npm run build


# STAGE 2: grab a fresh copy of the base image to reduce the final size
FROM node:lts-alpine

# include global arg in this stage of the build
ARG LAMBDA_FUNCTION_DIR

# set working directory to function root directory
WORKDIR ${LAMBDA_FUNCTION_DIR}

# copy in the built dependencies
COPY --from=build-image ${LAMBDA_FUNCTION_DIR} ${LAMBDA_FUNCTION_DIR}

# set the Runtime Interface Client as the executable
ENTRYPOINT ["/usr/local/bin/npx", "aws-lambda-ric"]
# ENTRYPOINT ["/usr/local/bin/aws-lambda-ric"]

# parameter for entrypoint, specify the desired handler
CMD ["dist/index.handler"]


# --- `dev` stage --- (it needs of bind mount to access code on host OS)
# FROM build AS dev
# ENV NODE_ENV=development
# ENV NODE_PORT=3030
# CMD ["npm", "run", "dev:ts"] 
